vector<int> printingLongestIncreasingSubsequence(vector<int> arr, int n) {
	vector<int>hash(n,0);
	vector<int>dp(n,1);

int max_len=0;
int last_idx=0;
	  for(int i=0;i<n;i++){
              hash[i]=i;
		  for(int prev=0;prev<i;prev++){

			  if(arr[prev]<arr[i] && dp[prev]+1>dp[i]){
				  dp[i]=dp[prev]+1;
				  hash[i]=prev;
			  }

		  }

		  if(max_len<dp[i]){
			  max_len=dp[i];
			  last_idx=i;
		  }
	  }

	  vector<int>lis;

	  lis.push_back(arr[last_idx]);

	  while(hash[last_idx]!=last_idx){
		 last_idx=hash[last_idx];
		   lis.push_back(arr[last_idx]);
	  }

    reverse(lis.begin(),lis.end());

	return lis;
}
